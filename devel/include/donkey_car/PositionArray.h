// Generated by gencpp from file donkey_car/PositionArray.msg
// DO NOT EDIT!


#ifndef DONKEY_CAR_MESSAGE_POSITIONARRAY_H
#define DONKEY_CAR_MESSAGE_POSITIONARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <donkey_car/Position.h>

namespace donkey_car
{
template <class ContainerAllocator>
struct PositionArray_
{
  typedef PositionArray_<ContainerAllocator> Type;

  PositionArray_()
    : servos()  {
    }
  PositionArray_(const ContainerAllocator& _alloc)
    : servos(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::donkey_car::Position_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::donkey_car::Position_<ContainerAllocator> >> _servos_type;
  _servos_type servos;





  typedef boost::shared_ptr< ::donkey_car::PositionArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::donkey_car::PositionArray_<ContainerAllocator> const> ConstPtr;

}; // struct PositionArray_

typedef ::donkey_car::PositionArray_<std::allocator<void> > PositionArray;

typedef boost::shared_ptr< ::donkey_car::PositionArray > PositionArrayPtr;
typedef boost::shared_ptr< ::donkey_car::PositionArray const> PositionArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::donkey_car::PositionArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::donkey_car::PositionArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::donkey_car::PositionArray_<ContainerAllocator1> & lhs, const ::donkey_car::PositionArray_<ContainerAllocator2> & rhs)
{
  return lhs.servos == rhs.servos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::donkey_car::PositionArray_<ContainerAllocator1> & lhs, const ::donkey_car::PositionArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace donkey_car

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::donkey_car::PositionArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::donkey_car::PositionArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::donkey_car::PositionArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::donkey_car::PositionArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::donkey_car::PositionArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::donkey_car::PositionArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::donkey_car::PositionArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06b5be802f78af7b5ec929fe386952bb";
  }

  static const char* value(const ::donkey_car::PositionArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06b5be802f78af7bULL;
  static const uint64_t static_value2 = 0x5ec929fe386952bbULL;
};

template<class ContainerAllocator>
struct DataType< ::donkey_car::PositionArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "donkey_car/PositionArray";
  }

  static const char* value(const ::donkey_car::PositionArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::donkey_car::PositionArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# the PositionArray message handles multiple position assignments\n"
"# of servos.\n"
"\n"
"Position[] servos\n"
"\n"
"================================================================================\n"
"MSG: donkey_car/Position\n"
"# the position message is used when configuring drive mode to\n"
"# assign a  servo to a specific wheel positon in the drive system\n"
"# postions are specific toe the desired drive mode\n"
"# ackerman has only one position\n"
"# 1 = drive\n"
"# differential has two positons\n"
"# 1 = left, 2 = right\n"
"# mecanum has four positions\n"
"# 1 = front left, 2 = front right, 3 = rear left, 4 = rear right\n"
"# multiple servos/motors may be used for each positon\n"
"\n"
"int16 servo\n"
"int16 position\n"
;
  }

  static const char* value(const ::donkey_car::PositionArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::donkey_car::PositionArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::donkey_car::PositionArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::donkey_car::PositionArray_<ContainerAllocator>& v)
  {
    s << indent << "servos[]" << std::endl;
    for (size_t i = 0; i < v.servos.size(); ++i)
    {
      s << indent << "  servos[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::donkey_car::Position_<ContainerAllocator> >::stream(s, indent + "    ", v.servos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DONKEY_CAR_MESSAGE_POSITIONARRAY_H
